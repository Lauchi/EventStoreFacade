@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<div>
    <div class="d-flex">
        @if(Model.HasMissingEvents)
        {
            <div class="dropdown p-3 col-4">
                <button class="btn btn-danger dropdown-toggle" type="button" id="dropdownMenuButton"
                data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    Some dependencies could not be discovered!
                </button>
                <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                    @foreach (var eventSubscription in Model.ConsumingServices.UnresolvedEventSubscriptions)
                    {
                        <a class="dropdown-item" href="#"><em class="fas fa-comment-dots pr-3"></em>
                            @Html.DisplayFor(modelItem => eventSubscription.Name)</a>
                    }

                    @foreach (var readModel in Model.ConsumingServices.UnresolvedReadModeSubscriptions)
                    {
                        <a class="dropdown-item" href="#"><em class="fas fa-book pr-3"></em>
                            @Html.DisplayFor(modelItem => readModel.ReadModelName)</a>
                    }
                </div>
            </div>
        }
        <form class="my-2 my-lg-0 p-3 ml-auto" method="post">
            <button class="btn btn-outline-success my-2 my-sm-0" type="submit">Discover Dependencies</button>
        </form>

    </div>
    <div class="container">
        <div class="card-deck">
            @foreach (var item in Model.ConsumingServices.Services)
            {
                <div class="card mb-4 pt-2">
                    <div class="card-body">
                        <h5 class="card-title">
                            <a href="@item.ServiceBaseAddress">@Html.DisplayFor(modelItem => item.ServiceName)</a>
                        </h5>

                        <div class="card">
                            <div class="card-header">
                                <em class="fas fa-book pr-3"></em>Readmodels
                            </div>
                            <ul class="list-group list-group-flush">
                                @foreach (var readModel in item.ReadModels)
                                {
                                    <div class="btn-group dropright">
                                        <button type="button"
                                                class="btn btn-white text-left pl-4 dropdown-toggle"
                                                data-toggle="dropdown"
                                                aria-haspopup="true"
                                                aria-expanded="false">
                                            @Html.DisplayFor(modelItem => readModel.ReadModelName)
                                        </button>
                                        <div class="dropdown-menu">
                                            <div class="dropdown-item">
                                                @Html.DisplayFor(modelItem => readModel.GetsCreatedOn.Name):
                                            </div>
                                            @foreach (var property in readModel.GetsCreatedOn.Properties)
                                            {
                                                <a class="dropdown-item" href="#">
                                                    <div class="d-flex flex-row">
                                                        <div class="pr-3">
                                                            @Html.DisplayFor(modelItem => property.Name)
                                                        </div>
                                                        <div class="text-secondary">
                                                            @Html.DisplayFor(modelItem => property.Type)
                                                        </div>
                                                    </div>
                                                </a>
                                            }
                                        </div>
                                    </div>
                                }
                            </ul>
                        </div>

                        <br/>

                        <div class="card">
                            <div class="card-header">
                                <em class="fas fa-comment-dots pr-3"></em>Subscribed events
                            </div>
                            <ul class="list-group list-group-flush">
                                @foreach (var subscribedEvent in item.SubscribedEvents)
                                {
                                    <div class="btn-group dropright">
                                        <button type="button"
                                                class="btn btn-white text-left pl-4 dropdown-toggle"
                                                data-toggle="dropdown"
                                                aria-haspopup="true"
                                                aria-expanded="false">
                                            @Html.DisplayFor(modelItem => subscribedEvent.Name)
                                        </button>
                                        <div class="dropdown-menu">
                                            @foreach (var property in subscribedEvent.Properties)
                                            {
                                                <a class="dropdown-item" href="#">
                                                    <div class="d-flex flex-row">
                                                        <div class="pr-3">
                                                            @Html.DisplayFor(modelItem => property.Name)
                                                        </div>
                                                        <div class="text-secondary">
                                                            @Html.DisplayFor(modelItem => property.Type)
                                                        </div>
                                                    </div>
                                                </a>
                                            }
                                        </div>
                                    </div>
                                }
                            </ul>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>
